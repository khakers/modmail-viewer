plugins {
    id 'java'
    id 'application'
    alias libs.plugins.gradle.release
    alias libs.plugins.docker.java
    alias libs.plugins.jte.gradle
    alias libs.plugins.license
    alias libs.plugins.gradle.git.properties
}

group 'com.github.khakers'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    dependsOn("copyReport")
}


application {
    mainClass = 'com.github.khakers.modmailviewer.Main'
}


repositories {
    mavenCentral()
}

dependencies {
    implementation libs.javalin
    implementation libs.javalin.rendering
    implementation libs.javalin.ssl.plugin

    implementation libs.jte

    implementation libs.flexmark
    implementation libs.flexmark.ext.gfm.strikethrough
    implementation libs.flexmark.ext.autolink

    implementation libs.webjar.bootstrap
    implementation libs.webjar.bootstrap.icons
    implementation libs.webjar.highlightjs
    implementation libs.webjar.unpoly
    implementation libs.webjar.chartjs
    implementation libs.webjar.chartjs.plugin.autocolors
    implementation libs.webjar.humanize.duration
    implementation(libs.webjar.glightbox)
    implementation(libs.webjar.plyr)

    implementation libs.mongodb.driver
    implementation libs.mongojack

    implementation libs.log4j.api
    implementation libs.log4j.core
    implementation libs.log4j.slf4j.impl

    implementation libs.jackson.databind
    implementation libs.jackson.databind.jsr310
    implementation libs.jackson.databind.jdk8

    implementation libs.auth0.jwt
    implementation libs.scribe.api
    implementation libs.scribe.okhttp

    implementation libs.owasp.encoder

    implementation platform(libs.okhttp.bom)
    implementation libs.okhttp

    implementation(libs.gestalt)

    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.junit.jupiter.params

}

test {
    useJUnitPlatform()
}

compileJava {
    options.incremental = true
}

jte {
    generate()
}

gitProperties {
    failOnNoGitDirectory = false
    customProperty("buildTimestamp", Instant.now())
}

docker {
    javaApplication {
        baseImage = libs.versions.docker.base.get()+':'+libs.versions.docker.tag.get()
        ports = [80]
    }
}

licenseReport {
    generateCsvReport = false
    generateHtmlReport = true
    generateJsonReport = false
    generateTextReport = true
//    ignoredPatterns = []
}

task('copyReport', type: Copy, dependsOn: 'licenseReport') {
    from layout.buildDirectory.file("reports/licenses/licenseReport.html")
    from layout.buildDirectory.file("reports/licenses/licenseReport.txt")
    into layout.buildDirectory.dir("resources/main/static")
}

//processResources {
//    dependsOn 'copyReport'
////    from layout.buildDirectory.file("reports/licenses/licenseReport.html")
//}


release {
    failOnUnversionedFiles.set(false)
    git {
        requireBranch.set('master|develop')
    }
}